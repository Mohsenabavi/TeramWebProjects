/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/aos@2.3.4/src/js/libs/observer.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
let callback=()=>{};function containsAOSNode(e){let t,r,o;for(t=0;t<e.length;t+=1){if((r=e[t]).dataset&&r.dataset.aos)return!0;if(o=r.children&&containsAOSNode(r.children))return!0}return!1}function getMutationObserver(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function isSupported(){return!!getMutationObserver()}function ready(e,t){const r=window.document,o=new(getMutationObserver())(check);callback=t,o.observe(r.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function check(e){e&&e.forEach(e=>{const t=Array.prototype.slice.call(e.addedNodes),r=Array.prototype.slice.call(e.removedNodes);if(containsAOSNode(t.concat(r)))return callback()})}export default{isSupported:isSupported,ready:ready};
//# sourceMappingURL=/sm/88a8c8726e01a81132a3ce12e1c303d09d5d749bdeb285480a479bf593d4aa81.map