// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Teram.QC.Module.FinalProduct.Entities.DbContext;

#nullable disable

namespace Teram.QC.Module.FinalProduct.Migrations
{
    [DbContext(typeof(FinalProductDbContext))]
    [Migration("20240602044434_AddEmployeeId")]
    partial class AddEmployeeId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.AcceptancePeriod", b =>
                {
                    b.Property<int>("AcceptancePeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcceptancePeriodId"));

                    b.Property<string>("A")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("EndInterval")
                        .HasColumnType("bigint");

                    b.Property<int>("QCControlPlanId")
                        .HasColumnType("int");

                    b.Property<int>("SampleCount")
                        .HasColumnType("int");

                    b.Property<long>("StartInterval")
                        .HasColumnType("bigint");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AcceptancePeriodId");

                    b.HasIndex("QCControlPlanId");

                    b.ToTable("AcceptancePeriods", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Actioner", b =>
                {
                    b.Property<int>("ActionerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonnelCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionerId");

                    b.ToTable("Actioners", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Causation", b =>
                {
                    b.Property<int>("CausationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CausationId"));

                    b.Property<bool?>("CanBeIdentifiedAtEntrance")
                        .HasColumnType("bit");

                    b.Property<int>("FinalProductNoncomplianceId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasEntitlementLicense")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasEquipmentCause")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasEssentialCause")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasFailureOfDefineJob")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasHRCause")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLackOfEducation")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLackOfFitWorkerAndJob")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasMethodCause")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasRawMaterialCause")
                        .HasColumnType("bit");

                    b.Property<int?>("InstructionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCaseError")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLackOfFit")
                        .HasColumnType("bit");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("RootCauseId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("WorkStationId")
                        .HasColumnType("int");

                    b.Property<int>("WrongdoerId")
                        .HasColumnType("int");

                    b.HasKey("CausationId");

                    b.HasIndex("FinalProductNoncomplianceId")
                        .IsUnique();

                    b.HasIndex("InstructionId");

                    b.HasIndex("MachineId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("RootCauseId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkStationId");

                    b.ToTable("Causations", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.CorrectiveAction", b =>
                {
                    b.Property<int>("CorrectiveActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorrectiveActionId"));

                    b.Property<int>("ActionerId")
                        .HasColumnType("int");

                    b.Property<int>("CausationId")
                        .HasColumnType("int");

                    b.Property<string>("Descriiption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CorrectiveActionId");

                    b.HasIndex("ActionerId");

                    b.HasIndex("CausationId");

                    b.ToTable("CorrectiveActions", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionId"));

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("InstructionId");

                    b.ToTable("Instructions", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("MachineId");

                    b.ToTable("Machines", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Operator", b =>
                {
                    b.Property<int>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorId"));

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorId");

                    b.ToTable("Operators", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.RootCause", b =>
                {
                    b.Property<int>("RootCauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RootCauseId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("RootCauseId");

                    b.ToTable("RootCauses", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UnitId");

                    b.ToTable("Units", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.WorkStation", b =>
                {
                    b.Property<int>("WorkStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkStationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("WorkStationId");

                    b.ToTable("WorkStations", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.ControlPlanDefect", b =>
                {
                    b.Property<int>("ControlPlanDefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ControlPlanDefectId"));

                    b.Property<string>("ControlPlanDefectVal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("QCControlPlanId")
                        .HasColumnType("int");

                    b.Property<int>("QCDefectId")
                        .HasColumnType("int");

                    b.HasKey("ControlPlanDefectId");

                    b.HasIndex("QCControlPlanId");

                    b.HasIndex("QCDefectId");

                    b.ToTable("ControlPlanDefects", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductInspection", b =>
                {
                    b.Property<int>("FinalProductInspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductInspectionId"));

                    b.Property<string>("ControlPlan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("EndInterval")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("OrderTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SampleCount")
                        .HasColumnType("int");

                    b.Property<long>("StartInterval")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalCount")
                        .HasColumnType("bigint");

                    b.Property<string>("TracingCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FinalProductInspectionId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("FinalProductInspections", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductInspectionDefect", b =>
                {
                    b.Property<int>("FinalProductInspectionDefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductInspectionDefectId"));

                    b.Property<int>("ControlPlanDefectId")
                        .HasColumnType("int");

                    b.Property<int>("FinalProductInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("FirstSample")
                        .HasColumnType("int");

                    b.Property<int>("ForthSample")
                        .HasColumnType("int");

                    b.Property<int>("SecondSample")
                        .HasColumnType("int");

                    b.Property<int>("ThirdSample")
                        .HasColumnType("int");

                    b.HasKey("FinalProductInspectionDefectId");

                    b.HasIndex("ControlPlanDefectId");

                    b.HasIndex("FinalProductInspectionId");

                    b.ToTable("FinalProductInspectionDefects", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNonComplianceCartableItem", b =>
                {
                    b.Property<int>("FinalProductNonComplianceCartableItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductNonComplianceCartableItemId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinalProductNoncomplianceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InputDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutputDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReferredBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FinalProductNonComplianceCartableItemId");

                    b.HasIndex("FinalProductNoncomplianceId");

                    b.ToTable("FinalProductNonComplianceCartableItems", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", b =>
                {
                    b.Property<int>("FinalProductNoncomplianceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductNoncomplianceId"));

                    b.Property<string>("ControlPlan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ControlPlanDefectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinalProductNoncomplianceNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("FinalProductNoncomplianceType")
                        .HasColumnType("int");

                    b.Property<int>("FirstSample")
                        .HasColumnType("int");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<int>("ForthSample")
                        .HasColumnType("int");

                    b.Property<bool?>("HasFinalResult")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLeniency")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasSeperationOrder")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasWasteOrder")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeperated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVoided")
                        .HasColumnType("bit");

                    b.Property<string>("LastComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NeedToAdvisoryOpinion")
                        .HasColumnType("bit");

                    b.Property<bool?>("NeedToCkeckByOther")
                        .HasColumnType("bit");

                    b.Property<bool?>("NeedToRefferToCEO")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("OrderTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("QualityControlManagerOpinion")
                        .HasColumnType("int");

                    b.Property<int>("ReferralStatus")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondSample")
                        .HasColumnType("int");

                    b.Property<int>("ThirdSample")
                        .HasColumnType("int");

                    b.HasKey("FinalProductNoncomplianceId");

                    b.HasIndex("ControlPlanDefectId");

                    b.ToTable("FinalProductNoncompliances", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceDetail", b =>
                {
                    b.Property<int>("FinalProductNoncomplianceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductNoncomplianceDetailId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FinalProductInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("FinalProductNoncomplianceId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("FinalProductNoncomplianceDetailId");

                    b.HasIndex("FinalProductNoncomplianceId");

                    b.ToTable("FinalProductNoncomplianceDetails", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceDetailSample", b =>
                {
                    b.Property<int>("FinalProductNoncomplianceDetailSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductNoncomplianceDetailSampleId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("FinalProductNoncomplianceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("OpinionTypeCEO")
                        .HasColumnType("int");

                    b.Property<int>("OpinionTypeCEOFinal")
                        .HasColumnType("int");

                    b.Property<int>("OpinionTypeQCManager")
                        .HasColumnType("int");

                    b.Property<int>("SampleType")
                        .HasColumnType("int");

                    b.Property<int>("SeparatedCount")
                        .HasColumnType("int");

                    b.Property<int>("WasteCount")
                        .HasColumnType("int");

                    b.Property<string>("WasteDocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinalProductNoncomplianceDetailSampleId");

                    b.HasIndex("FinalProductNoncomplianceDetailId");

                    b.ToTable("FinalProductNoncomplianceDetailSamples", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceFile", b =>
                {
                    b.Property<int>("FinalProductNoncomplianceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinalProductNoncomplianceFileId"));

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("FinalProductNoncomplianceId")
                        .HasColumnType("int");

                    b.HasKey("FinalProductNoncomplianceFileId");

                    b.HasIndex("FinalProductNoncomplianceId");

                    b.ToTable("FinalProductNoncomplianceFiles", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.QCControlPlan", b =>
                {
                    b.Property<int>("QCControlPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QCControlPlanId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QCControlPlanId");

                    b.ToTable("QCControlPlans", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.QCDefect", b =>
                {
                    b.Property<int>("QCDefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QCDefectId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QCDefectId");

                    b.ToTable("QCDefects", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.WorkFlow.FlowInstruction", b =>
                {
                    b.Property<int>("FlowInstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowInstructionId"));

                    b.Property<Guid>("CurrentCartableRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FormStatus")
                        .HasColumnType("int");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("NextCartableRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("FlowInstructionId");

                    b.ToTable("FlowInstructions", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.WorkFlow.FlowInstructionCondition", b =>
                {
                    b.Property<int>("FlowInstructionConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowInstructionConditionId"));

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlowInstructionId")
                        .HasColumnType("int");

                    b.HasKey("FlowInstructionConditionId");

                    b.HasIndex("FlowInstructionId");

                    b.ToTable("FlowInstructionConditions", "QCFP");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.AcceptancePeriod", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.QCControlPlan", "QCControlPlan")
                        .WithMany("AcceptancePeriods")
                        .HasForeignKey("QCControlPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCControlPlan");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Causation", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", "FinalProductNoncompliance")
                        .WithOne("Causation")
                        .HasForeignKey("Teram.QC.Module.FinalProduct.Entities.Causation.Causation", "FinalProductNoncomplianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.Instruction", "Instruction")
                        .WithMany("Causations")
                        .HasForeignKey("InstructionId");

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.Machine", "Machine")
                        .WithMany("Causations")
                        .HasForeignKey("MachineId");

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.Operator", "Operator")
                        .WithMany("Causations")
                        .HasForeignKey("OperatorId");

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.RootCause", "RootCause")
                        .WithMany("Causations")
                        .HasForeignKey("RootCauseId");

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.Unit", "Unit")
                        .WithMany("Causations")
                        .HasForeignKey("UnitId");

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.WorkStation", "WorkStation")
                        .WithMany("Causations")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalProductNoncompliance");

                    b.Navigation("Instruction");

                    b.Navigation("Machine");

                    b.Navigation("Operator");

                    b.Navigation("RootCause");

                    b.Navigation("Unit");

                    b.Navigation("WorkStation");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.CorrectiveAction", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.Actioner", "Actioner")
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("ActionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.Causation.Causation", "Causation")
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("CausationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actioner");

                    b.Navigation("Causation");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.ControlPlanDefect", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.QCControlPlan", "QCControlPlan")
                        .WithMany("ControlPlanDefects")
                        .HasForeignKey("QCControlPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.QCDefect", "QCDefect")
                        .WithMany("ControlPlanDefects")
                        .HasForeignKey("QCDefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCControlPlan");

                    b.Navigation("QCDefect");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductInspectionDefect", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.ControlPlanDefect", "ControlPlanDefect")
                        .WithMany("FinalProductInspectionDefects")
                        .HasForeignKey("ControlPlanDefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.FinalProductInspection", "FinalProductInspection")
                        .WithMany("FinalProductInspectionDefects")
                        .HasForeignKey("FinalProductInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlPlanDefect");

                    b.Navigation("FinalProductInspection");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNonComplianceCartableItem", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", "FinalProductNoncompliance")
                        .WithMany("FinalProductNonComplianceCartableItems")
                        .HasForeignKey("FinalProductNoncomplianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalProductNoncompliance");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.ControlPlanDefect", "ControlPlanDefect")
                        .WithMany("FinalProductNoncompliances")
                        .HasForeignKey("ControlPlanDefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlPlanDefect");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceDetail", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", "FinalProductNoncompliance")
                        .WithMany("FinalProductNoncomplianceDetails")
                        .HasForeignKey("FinalProductNoncomplianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalProductNoncompliance");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceDetailSample", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceDetail", "FinalProductNoncomplianceDetail")
                        .WithMany("FinalProductNoncomplianceDetailSamples")
                        .HasForeignKey("FinalProductNoncomplianceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalProductNoncomplianceDetail");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceFile", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", "FinalProductNoncompliance")
                        .WithMany("FinalProductNoncomplianceFiles")
                        .HasForeignKey("FinalProductNoncomplianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalProductNoncompliance");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.WorkFlow.FlowInstructionCondition", b =>
                {
                    b.HasOne("Teram.QC.Module.FinalProduct.Entities.WorkFlow.FlowInstruction", "FlowInstruction")
                        .WithMany("FlowInstructionConditions")
                        .HasForeignKey("FlowInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowInstruction");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Actioner", b =>
                {
                    b.Navigation("CorrectiveActions");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Causation", b =>
                {
                    b.Navigation("CorrectiveActions");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Instruction", b =>
                {
                    b.Navigation("Causations");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Machine", b =>
                {
                    b.Navigation("Causations");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Operator", b =>
                {
                    b.Navigation("Causations");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.RootCause", b =>
                {
                    b.Navigation("Causations");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.Unit", b =>
                {
                    b.Navigation("Causations");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.Causation.WorkStation", b =>
                {
                    b.Navigation("Causations");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.ControlPlanDefect", b =>
                {
                    b.Navigation("FinalProductInspectionDefects");

                    b.Navigation("FinalProductNoncompliances");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductInspection", b =>
                {
                    b.Navigation("FinalProductInspectionDefects");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncompliance", b =>
                {
                    b.Navigation("Causation")
                        .IsRequired();

                    b.Navigation("FinalProductNonComplianceCartableItems");

                    b.Navigation("FinalProductNoncomplianceDetails");

                    b.Navigation("FinalProductNoncomplianceFiles");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.FinalProductNoncomplianceDetail", b =>
                {
                    b.Navigation("FinalProductNoncomplianceDetailSamples");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.QCControlPlan", b =>
                {
                    b.Navigation("AcceptancePeriods");

                    b.Navigation("ControlPlanDefects");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.QCDefect", b =>
                {
                    b.Navigation("ControlPlanDefects");
                });

            modelBuilder.Entity("Teram.QC.Module.FinalProduct.Entities.WorkFlow.FlowInstruction", b =>
                {
                    b.Navigation("FlowInstructionConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
